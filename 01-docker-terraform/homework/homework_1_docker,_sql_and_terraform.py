# -*- coding: utf-8 -*-
"""Homework 1: Docker, SQL and Terraform

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LOFXDx64omu7caijOXNmOsz4-HLhBV3v

# **Homework 1: Docker, SQL and Terraform for Data Engineering Zoomcamp 2025**
"""

import pandas as pd

# Load the dataset
df = pd.read_csv("sample_data/green_tripdata_2019-10.csv.gz")

# Display the first few rows
print(df.head())

# Ensure that the date column is in datetime format
df['lpep_pickup_datetime'] = pd.to_datetime(df['lpep_pickup_datetime'])

start_date = "2019-10-01"
end_date = "2019-11-01"

df_filtered = df[(df['lpep_pickup_datetime'] >= start_date) & (df['lpep_pickup_datetime'] < end_date)]

# Categorize by distance
up_to_1_mile = df_filtered[df_filtered['trip_distance'] <= 1]
between_1_and_3_miles = df_filtered[(df_filtered['trip_distance'] > 1) & (df_filtered['trip_distance'] <= 3)]
between_3_and_7_miles = df_filtered[(df_filtered['trip_distance'] > 3) & (df_filtered['trip_distance'] <= 7)]
between_7_and_10_miles = df_filtered[(df_filtered['trip_distance'] > 7) & (df_filtered['trip_distance'] <= 10)]
over_10_miles = df_filtered[df_filtered['trip_distance'] > 10]

count_up_to_1_mile = len(up_to_1_mile)
count_1_to_3_miles = len(between_1_and_3_miles)
count_3_to_7_miles = len(between_3_and_7_miles)
count_7_to_10_miles = len(between_7_and_10_miles)
count_over_10_miles = len(over_10_miles)

print(count_up_to_1_mile, count_1_to_3_miles, count_3_to_7_miles, count_7_to_10_miles, count_over_10_miles)

# Extract the date from the pickup_datetime column
df['lpep_pickup_datetime'] = df['lpep_pickup_datetime'].dt.date

# Find the longest trip distance for each day
longest_trip_per_day = df.groupby('lpep_pickup_datetime')['trip_distance'].max()

# Find the date with the longest trip distance
longest_trip_day = longest_trip_per_day.idxmax()
longest_trip_day_distance = longest_trip_per_day.max()

print(longest_trip_day, longest_trip_day_distance)

# Ensure the lpep_pickup_datetime column is in datetime format
df['lpep_pickup_datetime'] = pd.to_datetime(df['lpep_pickup_datetime'])

# Filter for trips that happened on 2019-10-18
df_filtered = df[df['lpep_pickup_datetime'].dt.date == pd.to_datetime('2019-10-18').date()]

# Group by pickup zone and sum total_amount
pickup_zone_totals = df_filtered.groupby('PULocationID')['total_amount'].sum()

# Filter zones with total_amount over 13,000
filtered_zones = pickup_zone_totals[pickup_zone_totals > 13000]

# Sort the zones by total_amount in descending order
top_zones = filtered_zones.sort_values(ascending=False).head(3)

# Print the top three pickup zones
print(top_zones)

# Filter for October 2019 and East Harlem North pickup zone
df_filtered_x = df[(df['PULocationID'] == 74) &
                 (df['lpep_pickup_datetime'].dt.month == 10) &
                 (df['lpep_pickup_datetime'].dt.year == 2019)]

print(df_filtered_x)

# Group by dropoff zone and sum the tips
dropoff_zone_tips = df_filtered_x.groupby('DOLocationID')['tip_amount'].sum()

# Find the dropoff zone with the largest total tip
largest_tip_zone = dropoff_zone_tips.idxmax()
print(largest_tip_zone)

# Group by dropoff zone and sum the tips
dropoff_zone_tips_x = df_filtered_x.groupby('PULocationID')['tip_amount'].sum()

# Find the dropoff zone with the largest total tip
largest_tip_zone_x = dropoff_zone_tips_x.idxmax()
print(largest_tip_zone_x)